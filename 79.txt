Keywords are special tokens in the language which have reserved use in the language. Keywords may not be used as identifiers in Java — you cannot declare a field whose name is a keyword, for instance.Examples of keywords are the primitive types, int and boolean; the control flow statements for and if; access modifiers such as public, and special words which mark the declaration and definition of Java classes, packages, and interfaces: class, package, interface.Below are all the Java language keywords:In addition, the identifiers null, true, and false denote literal values and may not be used to create identifiers.abstract is a Java keyword. It can be applied to a class and methods. An abstract class cannot be directly instantiated. It must be placed before the variable type or the method return type. It is recommended to place it after the access modifier and after the static keyword. A non-abstract class is a concrete class. An abstract class cannot be final.Only an abstract class can have abstract methods. An abstract method is only declared, not implemented:An abstract method cannot be final, static nor native. Either you instantiate a concrete sub-class, either you instantiate the abstract class by implementing its abstract methods alongside a new statement:A private method cannot be abstract.assert is a Java keyword used to define an assert statement. An assert statement is used to declare an expected boolean condition in a program. If the program is running with assertions enabled, then the condition is checked at runtime. If the condition is false, the Java runtime system throws a AssertionError.Assertions may be declared using the following syntax:expression1 is a boolean that will throw the assertion if it is false. When it is thrown, the assertion error exception is created with the parameter expression2 (if applicable).An example:Assertions are usually used as a debugging aid. They should not be used instead of validating arguments to public methods, or in place of a more precise runtime error exception.Assertions are enabled with the Java -ea or -enableassertions runtime option. See your Java environment documentation for additional options for controlling assertions.boolean is a keyword which designates the boolean primitive type. There are only two possible boolean values: true and false. The default value for boolean fields is false.The following is a declaration of a private boolean field named initialized, and its use in a method named synchronizeConnection.The previous code only creates a connection once (at the first method call). Note that there is no automatic conversion between integer types (such as int) to boolean as is possible in some languages like C. Instead, one must use an equivalent expression such as (i != 0) which evaluates to true if i is not zero.break is a Java keyword.Jumps (breaks) out from a loop. Also used at switch statement.For example:See also:byte is a keyword which designates the 8 bit signed integer primitive type.The java.lang.Byte class is the nominal wrapper class when you need to store a byte value but an object reference is required.Syntax:For example:orThe number 65 is the code for 'A' in ASCII.See also:case is a Java keyword.This is part of the switch statement, to find if the value passed to the switch statement matches a value followed by case.For example:catch is a keyword.It's part of a try block. If an exception is thrown inside a try block, the exception will be compared to any of the catch part of the block. If the exception match with one of the exception in the catch part, the exception will be handled there.For example:See also:char is a keyword. It defines a character primitive type. char can be created from character literals and numeric representation. Character literals consist of a single quote character (') (ASCII 39, hex 0x27), a single character, and a close quote ('), such as 'w'. Instead of a character, you can also use unicode escape sequences, but there must be exactly one.Syntax:65 is the numeric representation of character 'A' , or its ASCII code.The nominal wrapper class is the java.lang.Character class when you need to store a char value but an object reference is required.See also:class is a Java keyword which begins the declaration and definition of a class.The general syntax of a class declaration, using Extended Backus-Naur Form, isThe extends word is optional. If omitted, the class extends the Object class, as all Java classes inherit from it.See also:const is a reserved keyword, presently not being used.In other programming languages, such as C, const is often used to declare a constant. However, in Java, final is used instead.continue is a Java keyword. It skips the remainder of the loop and continues with the next iteration.For example:results indefault is a Java keyword.This is an optional part of the switch statement, which only executes if none of the above cases are matched.See also:do is a Java keyword.It starts a do-while looping block. The do-while loop is functionally similar to the while loop, except the condition is evaluated after the statements executeSyntax:For example:See also:double is a keyword which designates the 64 bit float primitive type.The java.lang.Double class is the nominal wrapper class when you need to store a double value but an object reference is required.Syntax:For example:See also:else is a Java keyword. It is an optional part of a branching statement. It starts the 'false' statement block.The general syntax of a if, using Extended Backus-Naur Form, isFor example:See also:This enumeration constant then can be passed in to methods:An enumeration may also have parameters:It is also possible to let an enumeration implement interfaces other than java.lang.Comparable and java.io.Serializable, which are already implicitly implemented by each enumeration:extends is a Java keyword.Used in class and interface definition to declare the class or interface that is to be extended.Syntax:In Java 1.5 and later, the "extends" keyword is also used to specify an upper bound on a type parameter in Generics.See also:final is a keyword. Beware! It has distinct meanings depending whether it is used for a class, a method, or for a variable. It must be placed before the variable type or the method return type. It is recommended to place it after the access modifier and after the static keyword.The final keyword only allows a single assignment for the variable. That is to say, once the variable has been assigned, its value is in read-only. If the variable is a primitive type, its value will no longer change. If it is an object, only its reference will no longer change. Keep in mind that its value can still be changed.A final variable is often used for universal constants, such as pi:The final keyword can also be used for method parameters:It is useful for methods that use side effects to update some objects. Such methods modify the content of an object passed in parameter. The method caller will recieve the object update. This will fail if the object parameter has been reassigned in the method. Another object will be updated instead. Final method parameter can also be used to keep the code clean.The final keyword is similar to const in other languages and the readonly keyword in C#. A final variable cannot be volatile.The final keyword forbids the creation of a subclass. It is the case of the Integer or String class.A final class cannot be abstract. The final keyword is similar to sealed keyword in C#.The final keyword forbids to overwrite the method in a subclass. It is useless if the class is already final and a private method is implicitly final. A final method cannot be abstract.The final keyword is mostly used to guarantee a good usage of the code. For instance (non-static) methods, this allows the compiler to expand the method (similar to an inline function) if the method is small enough. Sometimes it is required to use it. For instance, a nested class can only access the members of the top-level class if they are final.finally is a keyword which is an optional part of the try block.The code inside the finally block will always be executed. This is also true for cases when there is an exception or even executed return statement in the try block.Three things can happen in a try block. First, no exception is thrown:You can see that we have passed in the try block, then we have executed the finally block and we have continued the execution. Now, a caught exception is thrown:We have passed in the try block until where the exception occurred, then we have executed the matching catch block, the finally block and we have continued the execution. Now, an uncaught exception is thrown:We have passed in the try block until where the exception occurred and we have executed the finally block. NO CODE after the try-catch block has been executed. If there is an exception that happens before the try-catch block, the finally block is not executed.If return statement is used inside finally, it overrides the return statement in the try-catch block. For instance, the constructwill return 12, not 11. Professional code almost never contains statements that alter execution order (like return, break, continue) inside the finally block, as such code is more difficult to read and maintain.float is a keyword which designates the 32 bit float primitive type.The java.lang.Float class is the nominal wrapper class when you need to store a float value but an object reference is required.Syntax:For example:See also:for is a Java keyword.It starts a looping block.The general syntax of a for, using Extended Backus-Naur Form, isFor example:See also:goto is a reserved keyword, presently not being used.if is a Java keyword. It starts a branching statement.The general syntax of a if, using Extended Backus-Naur Form, isFor example:See also:implements is a Java keyword.Used in class definition to declare the Interfaces that are to be implemented by the class.Syntax:See also:import is a Java keyword.It declares a Java class to use in the code below the import statement. Once a Java class is declared, then the class name can be used in the code without specifying the package the class belongs to.Use the '*' character to declare all the classes belonging to the package.Syntax:The static import construct allows unqualified access to static members without inheriting from the type containing the static members:Once the static members have been imported, they may be used without qualification:Caveat: use static import very sparingly to avoid polluting the program's namespace!See also:instanceof is a keyword.It checks if an object reference is an instance of a type, and returns a boolean value;The <object-reference> instanceof Object will return true for all non-null object references, since all Java objects are inherited from Object. instanceof will always return false if <object-reference> is null.Syntax:For example:Run the program:The output:Note that the instanceof operator can also be applied to interfaces. For example, if the example above was enhanced with the interfaceand the classes modified such that they implemented this interfacewe could ask if our object were edible.int is a keyword which designates the 32 bit signed integer primitive type.The java.lang.Integer class is the nominal wrapper class when you need to store an int value but an object reference is required.Syntax:For example:See also:interface is a Java keyword. It starts the declaration of a Java Interface.For example:See also:long is a keyword which designates the 64 bit signed integer primitive type.The java.lang.Long class is the nominal wrapper class when you need to store a long value but an object reference is required.Syntax:For example:See also:native is a java keyword. It marks a method, that it will be implemented in other languages, not in Java. The method is declared without a body and cannot be abstract. It works together with JNI (Java Native Interface).Syntax:Native methods were used in the past to write performance critical sections but with java getting faster this is now less common. Native methods are currently needed whenTo complete writing native method, you need to process your class with javah tool that will generate a header code in C. You then need to provide implementation of the header code, produce dynamically loadable library (.so under Linux, .dll under Windows) and load it (in the simplest case with System.load(library_file_name) . The code completion is trivial if only primitive types like integers are passed but gets more complex if it is needed to exchange strings or objects from the C code. In general, everything can be on C level, including creation of the new objects and calling back methods, written in java.To call the code in some other language (including C++), you need to write a bridge from C to that language. This is usually trivial as most of languages are callable from C.new is a Java keyword. It creates a Java object and allocates memory for it on the heap. new is also used for array creation, as arrays are also objects.Syntax:For example:See also:package is a Java keyword. It declares a 'name space' for the Java class. It must be put at the top of the Java file, it should be the first Java statement line.To ensure that the package name will be unique across vendors, usually the company url is used starting in backword.Syntax:For example:See also:private is a Java keyword which declares a member's access as private. That is, the member is only visible within the class, not from any other class (including subclasses). The visibility of private members extends to nested classes.Please note: Because access modifiers are not handled at instance level but at class level, private members of an object are visible from other instances of the same class!Syntax:See also:protected is a Java keyword.This keyword is an access modifier, used before a method or other class member to signify that the method or variable can only be accessed by elements residing in its own class or classes in the same package (as it would be for the default visibility level) but moreover from subclasses of its own class, including subclasses in foreign packages (if the access is made on an expression, whose type is the type of this subclass).Syntax:For example:See also:public is a Java keyword which declares a member's access as public. Public members are visible to all other classes. This means that any other class can access a public field or method. Further, other classes can modify public fields unless the field is declared as final.A best practice is to give fields private access and reserve public access to only the set of methods and final fields that define the class' public constants. This helps with encapsulation and information hiding, since it allows you to change the implementation of a class without affecting the consumers who use only the public API of the class.Below is an example of an immutable public class named Length which maintains private instance fields named units and magnitude but provides a public constructor and two public accessor methods.return is a Java keyword.Returns a primitive value, or an object reference, or nothing(void). It does not return object values, only object references.Syntax:short is a keyword. It defines a 16 bit signed integer primitive type.Syntax:For example:See also:static is a Java keyword. It can be applied to a field, a method or an inner class. A static field, method or class has a single instance for the whole class that defines it, even if there is no instance of this class in the program. For instance, a Java entry point (main()) has to be static. A static method cannot be abstract. It must be placed before the variable type or the method return type. It is recommended to place it after the access modifier and before the final keyword:The static items can be called on an instantiated object or directly on the class:Static methods cannot call non static methods. The this current object reference is also not available in static methods.The counter variable is incremented each time an object is created.Public static variable should not be used, as these become global variables that can be accessed from everywhere in the program. Global constants can be used, however. See below:strictfp is a java keyword, since Java 1.2 .It makes sure that floating point calculations result precisely the same regardless of the underlying operating system and hardware platform, even if more precision could be obtained. This is compatible with the earlier version of Java 1.1 . If you need that use it.Syntax for classes:Syntax for methods:See also:super is a keyword.Syntax:For example:Running the above program:In Java 1.5 and later, the "super" keyword is also used to specify a lower bound on a wildcard type parameter in Generics.See also:switch is a Java keyword.It is a branching operation, based on a number. The 'number' must be either char, byte, short, or int primitive type.Syntax:When the <integer-var> value match one of the <label>, then: The statements after the matched label will be executed including the following label's statements, until the end of the switch block, or until a break keyword is reached.For example:The output from the above code is:The same code can be written with if-else blocks":See also:synchronized is a keyword.It marks a critical section. A critical section is where one and only one thread is executing. So to enter into the marked code the threads are synchronized, only one can enter, the others have to wait. For more information see Synchronizing Threads Methods or [3].The synchronized keyword can be used in two ways:A synchronized block is marked as:The syntax to mark a method synchronized is:The synchronization is always associated to an object. If the method is static, the associated object is the class. If the method is non-static, the associated object is the instance. While it is allowed to declare an abstract method as synchronized, it is meaningless to do so since synchronization is an aspect of the implementation, not the declaration, and abstract methods do not have an implementation.As an example, we can show a thread-safe version of a singleton:this is a Java keyword. It contains the current object reference.Syntax:Example #1 for case 1:Example #2 for case 1:throw is a keyword. It 'throws' an exception.Syntax:For example:See also:throws is a Java keyword. It is used in a method definition to declare the Exceptions to be thrown by the method.Syntax:Example:transient is a Java keyword which marks a member variable not to be serialized when it is persisted to streams of bytes. When an object is transferred through the network, the object needs to be 'serialized'. Serialization converts the object state to serial bytes. Those bytes are sent over the network and the object is recreated from those bytes. Member variables marked by the java transient keyword are not transferred; they are lost intentionally.Syntax:For example:See also:try is a keyword.It starts a try block. If an Exception is thrown inside a try block, the Exception will be compared any of the catch part of the block. If the Exception match with one of the Exception in the catch part, the exception will be handled there.Three things can happen in a try block:For example:How the catch-blocks are evaluated see Catching RuleSee also:void is a Java keyword.Used at method declaration and definition to specify that the method does not return any type, the method returns void. It is not a type and there is no void references/pointers as in C/C++.For example:See also:volatile is a keyword.When member variables are marked with this keyword, it changes the runtime behavior in a way that is noticeable when multiple threads access these variables. Without the volatile keyword, one thread could observe another thread update member variables in an order that is not consistent with what is specified in sourcecode. Unlike the synchronized keyword, concurrent access to a volatile field is allowed.Syntax:For example:See also:while is a Java keyword.It starts a looping block.The general syntax of a while, using Extended Backus-Naur Form, isFor example:See also: